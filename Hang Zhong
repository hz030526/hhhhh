import numpy

import scipy.special

class neuralNetwork: 

def __init__(self, inputnodes,hiddennodes,outputnodes,learningrate):

self.inputnodes = inputnodes 

self.hiddennodes = hiddennodes 

self.outputnodes = outputnodes 

self.leaningreate = learningrate


self.wih = numpy.random.normal(0.0,pow(self.inputnodes, -0.5),(self.hiddennodes, self.inputnodes))

self.who = numpy.random.normal(0.0,pow(self.hiddennodes, -0.5),(self.outputnodes, self.hiddennodes))


def train(self, inputs_list, targets_list):

inputs = numpy.array(inputs_list, ndmin=2).T

targets = numpy.array(targets_list, ndmin=2).T

hidden_inputs = numpy.dot(self.wih, inputs)

hidden_outputs = self.activation_function(hidden_inputs)


final_inputs = numpy.dot(self.who, hidden_outputs)

final_outputs = self.activation_function(final_inputs)

output_errors = targets - final_outputs

hidden_errors = numpy.numpy.dot(self.who.T, output_errors)

self.who += self.lr * numpy.dot((output_errors * final_outputs * (1.0 - final_outputs)),numpy.transpose(hidden_outputs))

self.self.wih += self.lr * numpy.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), numpy.transpose(inputs))


def query(self, inputs_list):

inputs = numpy.array(inputs_list, ndmin=2).T

hidden_inputs = numpy.dot(self.wih, inputs)

hidden_outputs = self.activation_function(hidden_inputs)
